import { randomUUID } from 'crypto'

const admZipStubs = {
    addFile: jest.fn(),
    toBuffer: jest.fn(),
    toString: jest.fn(),
}

const utilsStubs = {
    isAvailable: jest.fn(),
    getGreeting: jest.fn(),
    getAge: jest.fn(),
    getUserFullName: jest.fn(),
    extractContextMenu: jest.fn(),
    extractNavigationPanel: jest.fn(),
}

class AdmZipMock {
    addFile(...args: unknown[]): unknown {
        return admZipStubs.addFile(...args)
    }

    toBuffer(...args: unknown[]): unknown {
        return admZipStubs.toBuffer(...args)
    }
}

jest.mock('adm-zip', () => AdmZipMock)
const actualUtils = jest.requireActual('@diia-inhouse/utils')

jest.mock('@diia-inhouse/utils', () => ({
    ...actualUtils,
    PublicServiceUtils: {
        isAvailable: utilsStubs.isAvailable,
        extractContextMenu: utilsStubs.extractContextMenu,
        extractNavigationPanel: utilsStubs.extractNavigationPanel,
    },
    utils: {
        handleError: actualUtils.utils.handleError.bind(actualUtils.utils),
        getGreeting: utilsStubs.getGreeting,
        getAge: utilsStubs.getAge,
        getUserFullName: utilsStubs.getUserFullName,
    },
}))

import moment from 'moment'
import { Query, UpdateWriteOpResult } from 'mongoose'

import { RatingCategory } from '@diia-inhouse/analytics'
import DiiaLogger from '@diia-inhouse/diia-logger'
import { EventBus, InternalEvent, Task } from '@diia-inhouse/diia-queue'
import { GetInternalPassportWithRegistrationResponse, PassportByInnDocumentType } from '@diia-inhouse/documents-service-client'
import { BadRequestError, ModelNotFoundError, NotFoundError, ServiceUnavailableError, ValidationError } from '@diia-inhouse/errors'
import TestKit, { mockInstance } from '@diia-inhouse/test'
import {
    DocStatus,
    DocumentType,
    DurationMs,
    IdentityDocumentType,
    PublicServiceCode,
    PublicServiceKebabCaseCode,
    PublicServiceStatus,
    SessionType,
} from '@diia-inhouse/types'
import { UserDocument } from '@diia-inhouse/user-service-client'

import {
    CriminalRecordCertificate,
    CriminalRecordCertificateApplicationScreen,
    CriminalRecordCertificateStatus,
    CriminalRecordCertificateType,
} from '@src/generated/criminal-cert-service'
import CriminalRecordCertificateProvider from '@src/providers/criminalRecordCertificate/sevdeir'

import AddressService from '@services/address'
import AnalyticsService from '@services/analytics'
import CriminalRecordCertificateService from '@services/criminalRecordCertificate'
import DocumentsService from '@services/documents'
import NotificationService from '@services/notification'
import UserService from '@services/user'

import criminalRecordCertificateModel from '@models/criminalRecordCertificate'

import CriminalRecordCertificateMapper from '@dataMappers/criminalRecordCertificateDataMapper'

import { cryptoDocServiceClient, publicServiceCatalogClient } from '@tests/mocks/grpc/clients'

import { AppConfig } from '@interfaces/config'
import {
    CriminalCertificateUpdateEventStatus,
    CriminalRecordCertOrderGender,
    CriminalRecordCertOrderStatus,
    CriminalRecordCertOrderType,
} from '@interfaces/providers/criminalRecordCertificate'
import { ProcessCode } from '@interfaces/services'
import { MessageTemplateCode } from '@interfaces/services/notification'
import { ServiceTask } from '@interfaces/tasks'

describe('CriminalRecordCertificateService', () => {
    const testKit = new TestKit()
    const config = <AppConfig>{
        app: { dateFormat: 'DD.MM.YYYY' },
        sevdeir: {
            isEnabled: true,
            criminalRecordCertificate: {
                applicationExpirationDays: 90,
                checkBatchSize: 3,
                checkIntervalMs: 30000,
            },
        },
    }
    const loggerMock = mockInstance(DiiaLogger)
    const taskMock = mockInstance(Task)
    const eventBusMock = mockInstance(EventBus)
    const addressServiceMock = mockInstance(AddressService)
    const notificationServiceMock = mockInstance(NotificationService)
    const documentsServiceMock = mockInstance(DocumentsService)
    const userServiceMock = mockInstance(UserService)
    const criminalRecordCertificateMapperMock = mockInstance(CriminalRecordCertificateMapper, {
        applicationStartMessage:
            '–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏: \n\n‚Ä¢ —Ç–∏–ø —Ç–∞ –º–µ—Ç—É –∑–∞–ø–∏—Ç—É; \n‚Ä¢ –º—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è; \n‚Ä¢ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. \n\n–Ø–∫—â–æ –∑ –¥–∞–Ω–∏–º–∏ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤–∏—Ç—è–≥ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤. –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ‚Äî –ø—Ä–æ—Ç—è–≥–æ–º 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤.',
        missingTaxpayerCardAttentionMessage: '–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å. –í–∞—à –†–ù–û–ö–ü–ü –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–¥–∞—Ç–∫–æ–≤–æ—é.',
        confirmingTaxpayerCardAttentionMessage: '–í–∞—à –†–ù–û–ö–ü–ü —â–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –ø–æ–¥–∞—Ç–∫–æ–≤–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ.',
        unsuitableAgeAttentionMessage: '–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å. –í–∞–º —â–µ –Ω–µ –≤–∏–ø–æ–≤–Ω–∏–ª–æ—Å—è 14 —Ä–æ–∫—ñ–≤.',
        serviceIsNotActiveAttentionMessage: '–ù–∞ –∂–∞–ª—å, –ø–æ—Å–ª—É–≥–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        processingApplicationExistsMessage:
            '–ù–∞—Ä–∞–∑—ñ –ø–æ—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É —Ç–∞ –∑–∞–º–æ–≤—Ç–µ –Ω–æ–≤–∏–π –≤–∏—Ç—è–≥.',
        noCertificatesByStatusMessage: {
            [CriminalRecordCertificateStatus.done]: {
                icon: 'ü§∑‚Äç‚ôÇÔ∏è',
                text: '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≥–æ—Ç–æ–≤–∏—Ö –≤–∏—Ç—è–≥—ñ–≤. \n–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ, –∫–æ–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω—ñ –≤–∏—Ç—è–≥–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ.',
                parameters: [],
            },
        },
    })
    const criminalRecordCertificateProviderMock = mockInstance(CriminalRecordCertificateProvider, {
        reasons: new Map([
            ['1', "–£—Å–∏–Ω–æ–≤–ª–µ–Ω–Ω—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø—ñ–∫–∏ (–ø—ñ–∫–ª—É–≤–∞–Ω–Ω—è), —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–π–æ–º–Ω–æ—ó —Å—ñ–º'—ó –∞–±–æ –¥–∏—Ç—è—á–æ–≥–æ –±—É–¥–∏–Ω–∫—É —Å—ñ–º–µ–π–Ω–æ–≥–æ —Ç–∏–ø—É"],
            ['2', '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≤—ñ–∑–∏ –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω'],
            ['56', '–ù–∞–¥–∞–Ω–Ω—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –¥–µ—Ä–∂–∞–≤'],
            ['5', '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω–∞ —Ä–æ–±–æ—Ç—É'],
            ['55', '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ –∑–±—Ä–æ—é, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–∞ —Ä–æ–±–æ—Ç—É –∑ –≤–∏–±—É—Ö–æ–≤–∏–º–∏ —Ä–µ—á–æ–≤–∏–Ω–∞–º–∏'],
            ['7', '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–∞ —Ä–æ–±–æ—Ç—É –∑ –Ω–∞—Ä–∫–æ—Ç–∏—á–Ω–∏–º–∏ –∑–∞—Å–æ–±–∞–º–∏, –ø—Å–∏—Ö–æ—Ç—Ä–æ–ø–Ω–∏–º–∏ —Ä–µ—á–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –ø—Ä–µ–∫—É—Ä—Å–æ—Ä–∞–º–∏'],
            ['37', '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä—ñ –∑–∞–∫—É–ø—ñ–≤–µ–ª—å'],
            ['9', '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞'],
            ['63', '–ü–æ–¥–∞–Ω–Ω—è –¥–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É –∫–æ–º–ø–ª–µ–∫—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏'],
            ['44', "–ü—Ä–µ–¥'—è–≤–ª–µ–Ω–Ω—è –∑–∞ –º—ñ—Å—Ü–µ–º –≤–∏–º–æ–≥–∏"],
        ]),
        types: [
            {
                code: CriminalRecordCertificateType.short,
                name: '–ö–æ—Ä–æ—Ç–∫–∏–π',
                description: '–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —á–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—É–¥–∏–º–æ—Å—Ç—ñ',
            },
            {
                code: CriminalRecordCertificateType.full,
                name: '–ü–æ–≤–Ω–∏–π',
                description:
                    '–ü—Ä–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –¥–æ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ; –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—É–¥–∏–º–æ—Å—Ç—ñ; –æ–±–º–µ–∂–µ–Ω–Ω—è, –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ-–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ–º',
            },
        ],
    })
    const analyticsServiceMock = mockInstance(AnalyticsService)
    const criminalRecordCertificateService = new CriminalRecordCertificateService(
        config,
        loggerMock,
        taskMock,
        eventBusMock,
        addressServiceMock,
        notificationServiceMock,
        documentsServiceMock,
        publicServiceCatalogClient,
        userServiceMock,
        criminalRecordCertificateMapperMock,
        criminalRecordCertificateProviderMock,
        analyticsServiceMock,
        cryptoDocServiceClient,
    )
    const { user } = testKit.session.getUserSession()
    const now = new Date()

    const {
        lastNameUA,
        firstNameUA,
        middleNameUA,
        recordNumber,
        genderEN,
        birthday,
        birthPlaceUA,
        series,
        docNumber,
        issueDate,
        expirationDate,
        department,
    } = testKit.docs.getInternalPassport()
    const internalPassportWithRegistration = <GetInternalPassportWithRegistrationResponse>{
        registration: {
            address: {
                registrationDate: '20.07.1969',
                cancelregistrationDate: '',
                addressKoatuu: '8000000000',
                addressGromKatottg: 'UA80000000000000000',
            },
            fullName: '–£–ö–†–ê–á–ù–ê –ú. –ö–ò–á–í –í–£–õ. –ê–†–ú–°–¢–†–û–ù–ì–ê –ë–£–î. 11 –ö–í. 69',
            registrationDate: moment('20.07.1969', config.app.dateFormat).toDate(),
        },
        passport: {
            birthCountry: '–£–∫—Ä–∞—ó–Ω–∞',
            lastNameUA,
            firstNameUA,
            middleNameUA,
            recordNumber,
            genderEN,
            birthday,
            birthPlaceUA,
            type: PassportByInnDocumentType.pass,
            docSerial: series,
            docNumber,
            issueDate,
            expirationDate,
            department,
        },
    }

    const publicServiceSettings = {
        id: randomUUID(),
        categories: [],
        code: PublicServiceCode.criminalRecordCertificate,
        name: 'criminal-record-certificate-settings',
        status: PublicServiceStatus.active,
        segments: [],
        contextMenu: [],
        sessionTypes: [SessionType.User],
        sortOrder: 1,
        locales: {
            UA: 'ua',
        },
    }

    beforeAll(() => {
        jest.useFakeTimers({ now })
    })

    afterAll(() => {
        jest.useRealTimers()
    })

    describe('method `types`', () => {
        it('should fetch types from provider', () => {
            expect(criminalRecordCertificateService.types).toEqual(criminalRecordCertificateProviderMock.types)
        })
    })

    describe('method `reasons`', () => {
        it('should fetch reasons from provider', () => {
            expect(criminalRecordCertificateService.reasons).toEqual(criminalRecordCertificateProviderMock.reasons)
        })
    })

    describe('reasons', () => {})

    describe('method `checkSendApplicationDataParams`', () => {
        const { phoneNumber } = user
        const validParams = {
            nationalities: [],
            phoneNumber,
            publicService: {
                code: PublicServiceCode.criminalRecordCertificate,
                resourceId: randomUUID(),
            },
            reasonId: randomUUID(),
            certificateType: CriminalRecordCertificateType.full,
        }

        it('should successfully pass validation', () => {
            expect(() => {
                criminalRecordCertificateService.checkSendApplicationDataParams(validParams)
            }).not.toThrow()
        })

        it.each([
            [
                'publicService and reasonId is missing',
                { ...validParams, publicService: undefined, reasonId: undefined },
                new ValidationError([
                    {
                        type: 'Fields are required',
                        message: 'reasonId, certificateType, phoneNumber are required when publicService provided',
                        field: 'reasonId, certificateType, phoneNumber',
                    },
                ]),
            ],
            [
                'publicService and certificateType is missing',
                { ...validParams, publicService: undefined, certificateType: undefined },
                new ValidationError([
                    {
                        type: 'Fields are required',
                        message: 'reasonId, certificateType, phoneNumber are required when publicService provided',
                        field: 'reasonId, certificateType, phoneNumber',
                    },
                ]),
            ],
            [
                'publicService and phoneNumber is missing',
                { ...validParams, publicService: undefined, phoneNumber: '' },
                new ValidationError([
                    {
                        type: 'Fields are required',
                        message: 'reasonId, certificateType, phoneNumber are required when publicService provided',
                        field: 'reasonId, certificateType, phoneNumber',
                    },
                ]),
            ],
            [
                'publicService code is not expected and resourceId is not included',
                { ...validParams, publicService: { code: PublicServiceCode.damagedPropertyRecovery } },
                new ValidationError([
                    {
                        type: 'Field is required',
                        message: `publicService.resourceId is required when publicService.code in ${[
                            PublicServiceCode.damagedPropertyRecovery,
                        ].join('|')} values`,
                        field: 'publicService.resourceId',
                    },
                ]),
            ],
        ])('should not pass validation in case %s', (_msg, invalidParams, expectedError) => {
            expect(() => {
                criminalRecordCertificateService.checkSendApplicationDataParams(invalidParams)
            }).toThrow(expectedError)
        })
    })

    describe('method `checkApplicationForPublicService`', () => {
        const validCertificate = {
            applicationId: randomUUID(),
            status: CriminalRecordCertificateStatus.applicationProcessing,
            receivingApplicationTime: new Date(),
        }
        const validCertificateModel = new criminalRecordCertificateModel(validCertificate)
        const resourceId = randomUUID()
        const { identifier: userIdentifier } = user

        it.each([
            [
                'and return true',
                { code: PublicServiceCode.damagedPropertyRecovery, resourceId },
                (): void => {
                    jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(validCertificateModel)
                    jest.spyOn(validCertificateModel, 'save').mockResolvedValueOnce(validCertificateModel)
                    jest.spyOn(eventBusMock, 'publish').mockResolvedValueOnce(true)
                },
                (): void => {
                    expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                        userIdentifier,
                        status: { $in: [CriminalRecordCertificateStatus.applicationProcessing, CriminalRecordCertificateStatus.done] },
                        'reason.code': '44',
                        type: CriminalRecordCertificateType.full,
                    })
                    expect(validCertificateModel.save).toHaveBeenCalledWith()
                },
                {
                    applicationId: validCertificate.applicationId,
                    hasOrderedCertificate: true,
                    status: CriminalCertificateUpdateEventStatus.Requested,
                },
            ],
            [
                'and return false in case certificate is not found',
                { code: PublicServiceCode.criminalRecordCertificate, resourceId },
                (): void => {
                    jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(null)
                },
                (): void => {
                    expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                        userIdentifier,
                        status: { $in: [CriminalRecordCertificateStatus.applicationProcessing, CriminalRecordCertificateStatus.done] },
                    })
                },
                { hasOrderedCertificate: false },
            ],
            [
                'and return false in case certificate is outdated',
                { code: PublicServiceCode.criminalRecordCertificate, resourceId },
                (): void => {
                    jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(
                        new criminalRecordCertificateModel({
                            ...validCertificate,
                            receivingApplicationTime: new Date(new Date().getTime() - DurationMs.Day * 31),
                        }),
                    )
                },
                (): void => {
                    expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                        userIdentifier,
                        status: { $in: [CriminalRecordCertificateStatus.applicationProcessing, CriminalRecordCertificateStatus.done] },
                    })
                },
                { hasOrderedCertificate: false },
            ],
            [
                'and return true even when certificate status updated event is not triggered due to unacceptable status',
                { code: PublicServiceCode.damagedPropertyRecovery, resourceId },
                (): void => {
                    jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(
                        new criminalRecordCertificateModel({ ...validCertificate, status: CriminalRecordCertificateStatus.cancel }),
                    )
                },
                (): void => {
                    expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                        userIdentifier,
                        status: { $in: [CriminalRecordCertificateStatus.applicationProcessing, CriminalRecordCertificateStatus.done] },
                        'reason.code': '44',
                        type: CriminalRecordCertificateType.full,
                    })
                },
                {
                    hasOrderedCertificate: true,
                    applicationId: validCertificate.applicationId,
                    status: undefined,
                },
            ],
        ])('should pass checking %s', async (_msg, publicService, defineSpies, checkExpectations, expectedResult) => {
            defineSpies()

            expect(await criminalRecordCertificateService.checkApplicationForPublicService(userIdentifier, publicService)).toMatchObject(
                expectedResult,
            )

            checkExpectations()
        })
    })

    describe('method `checkApplicationsStatuses`', () => {
        const { identifier: userIdentifier } = user
        const { mobileUid } = testKit.session.getHeaders()
        const signature = 'signature'
        const applications = [
            {
                applicationId: randomUUID(),
                userIdentifier,
                mobileUid,
                notifications: { [randomUUID()]: new Date() },
                createdAt: new Date(),
            },
            {
                applicationId: randomUUID(),
                userIdentifier,
                mobileUid,
                notifications: { [randomUUID()]: new Date() },
                createdAt: new Date(),
                publicService: {
                    code: PublicServiceCode.criminalRecordCertificate,
                    resourceId: randomUUID(),
                },
            },
            {
                applicationId: randomUUID(),
                userIdentifier,
                mobileUid,
                notifications: {},
                createdAt: new Date(
                    new Date().getTime() - DurationMs.Day * (config.sevdeir.criminalRecordCertificate.applicationExpirationDays + 2),
                ),
                publicService: {
                    code: PublicServiceCode.damagedPropertyRecovery,
                    resourceId: randomUUID(),
                },
            },
        ]

        it('should successfully check applications statuses', async () => {
            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValue({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'checkStatus')
                .mockResolvedValueOnce(CriminalRecordCertificateStatus.done)
                .mockResolvedValueOnce(CriminalRecordCertificateStatus.done)
                .mockResolvedValueOnce(CriminalRecordCertificateStatus.applicationProcessing)
            jest.spyOn(eventBusMock, 'publish').mockResolvedValueOnce(true)
            jest.spyOn(analyticsServiceMock, 'notifyRate').mockResolvedValueOnce()
            jest.spyOn(notificationServiceMock, 'createNotificationWithPushesByMobileUid').mockResolvedValueOnce()
            jest.spyOn(criminalRecordCertificateModel, 'updateMany')
                .mockResolvedValueOnce(<UpdateWriteOpResult>{ modifiedCount: 2 })
                .mockResolvedValueOnce(<UpdateWriteOpResult>{ modifiedCount: 1 })

            await criminalRecordCertificateService.checkApplicationsStatuses(applications)

            expect(cryptoDocServiceClient.docGenerateSignature).toHaveBeenCalledWith({
                contentBase64: Buffer.from(' ').toString('base64'),
                external: true,
            })
            expect(criminalRecordCertificateProviderMock.checkStatus).toHaveBeenCalledWith({
                requestId: applications[0].applicationId,
                signature,
            })
            expect(criminalRecordCertificateProviderMock.checkStatus).toHaveBeenCalledWith({
                requestId: applications[1].applicationId,
                signature,
            })
            expect(criminalRecordCertificateProviderMock.checkStatus).toHaveBeenCalledWith({
                requestId: applications[2].applicationId,
                signature,
            })
            expect(eventBusMock.publish).toHaveBeenCalledWith(InternalEvent.CriminalCertificateStatusUpdated, {
                publicServiceCode: applications[1]?.publicService?.code,
                userIdentifier,
                resourceId: applications[1]?.publicService?.resourceId,
                applicationId: applications[1].applicationId,
                status: CriminalRecordCertificateStatus.done,
            })
            expect(analyticsServiceMock.notifyRate).toHaveBeenCalledWith({
                userIdentifier,
                category: RatingCategory.PublicService,
                serviceCode: PublicServiceKebabCaseCode.CriminalRecordCertificate,
                resourceId: applications[0].applicationId,
            })
            expect(notificationServiceMock.createNotificationWithPushesByMobileUid).toHaveBeenLastCalledWith({
                templateCode: MessageTemplateCode.CriminalRecordCertificateApplicationDone,
                userIdentifier,
                mobileUid,
                resourceId: applications[0].applicationId,
            })
            expect(criminalRecordCertificateModel.updateMany).toHaveBeenCalledWith(
                { applicationId: { $in: [applications[0].applicationId, applications[1].applicationId] } },
                {
                    $set: {
                        status: CriminalRecordCertificateStatus.done,
                        receivingApplicationTime: new Date(),
                        [`notifications.${MessageTemplateCode.CriminalRecordCertificateApplicationDone}`]: new Date(),
                    },
                    $push: {
                        statusHistory: { status: CriminalRecordCertificateStatus.done, date: new Date() },
                    },
                },
            )
            expect(criminalRecordCertificateModel.updateMany).toHaveBeenCalledWith(
                { applicationId: { $in: [applications[2].applicationId] } },
                {
                    $set: {
                        status: CriminalRecordCertificateStatus.cancel,
                        [`notifications.${MessageTemplateCode.CriminalRecordCertificateApplicationRefused}`]: new Date(),
                    },
                    $push: {
                        statusHistory: { status: CriminalRecordCertificateStatus.cancel, date: new Date() },
                    },
                },
            )
            expect(loggerMock.info).toHaveBeenCalledWith('Updated applications: done 2; refused 1')
        })

        it('should successfully check applications status even if failed to check and send push notifications for some application in provided list', async () => {
            const rejectedError = new ServiceUnavailableError()

            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValue({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'checkStatus')
                .mockRejectedValueOnce(rejectedError)
                .mockResolvedValueOnce(CriminalRecordCertificateStatus.done)
                .mockResolvedValueOnce(CriminalRecordCertificateStatus.applicationProcessing)
            jest.spyOn(criminalRecordCertificateModel, 'updateMany')
                .mockResolvedValueOnce(<UpdateWriteOpResult>{ modifiedCount: 1 })
                .mockResolvedValueOnce(<UpdateWriteOpResult>{ modifiedCount: 1 })

            await criminalRecordCertificateService.checkApplicationsStatuses(applications, [])

            expect(cryptoDocServiceClient.docGenerateSignature).toHaveBeenCalledWith({
                contentBase64: Buffer.from(' ').toString('base64'),
                external: true,
            })
            expect(criminalRecordCertificateProviderMock.checkStatus).toHaveBeenCalledWith({
                requestId: applications[0].applicationId,
                signature,
            })
            expect(criminalRecordCertificateProviderMock.checkStatus).toHaveBeenCalledWith({
                requestId: applications[1].applicationId,
                signature,
            })
            expect(criminalRecordCertificateProviderMock.checkStatus).toHaveBeenCalledWith({
                requestId: applications[2].applicationId,
                signature,
            })
            expect(loggerMock.fatal).toHaveBeenCalledWith('Failed check application status with id and send push notifications', {
                applicationId: applications[0].applicationId,
                err: rejectedError,
            })
            expect(criminalRecordCertificateModel.updateMany).toHaveBeenCalledWith(
                { applicationId: { $in: [applications[1].applicationId] } },
                {
                    $set: {
                        status: CriminalRecordCertificateStatus.done,
                        receivingApplicationTime: new Date(),
                    },
                    $push: {
                        statusHistory: { status: CriminalRecordCertificateStatus.done, date: new Date() },
                    },
                },
            )
            expect(criminalRecordCertificateModel.updateMany).toHaveBeenCalledWith(
                { applicationId: { $in: [applications[2].applicationId] } },
                {
                    $set: {
                        status: CriminalRecordCertificateStatus.cancel,
                    },
                    $push: {
                        statusHistory: { status: CriminalRecordCertificateStatus.cancel, date: new Date() },
                    },
                },
            )
            expect(loggerMock.info).toHaveBeenCalledWith('Updated applications: done 1; refused 1')
        })

        it('should just update models in case all status checks are failed', async () => {
            const rejectedError = new ServiceUnavailableError()

            jest.spyOn(Promise, 'all').mockRejectedValueOnce(rejectedError)
            jest.spyOn(criminalRecordCertificateModel, 'updateMany')
                .mockResolvedValueOnce(<UpdateWriteOpResult>{ modifiedCount: 0 })
                .mockResolvedValueOnce(<UpdateWriteOpResult>{ modifiedCount: 0 })

            await criminalRecordCertificateService.checkApplicationsStatuses([], [])

            expect(Promise.all).toHaveBeenCalledWith([])
            expect(loggerMock.fatal).toHaveBeenCalledWith('Failed check applications status and send push notifications', {
                err: rejectedError,
            })
            expect(criminalRecordCertificateModel.updateMany).toHaveBeenCalledWith(
                { applicationId: { $in: [] } },
                {
                    $set: {
                        status: CriminalRecordCertificateStatus.done,
                        receivingApplicationTime: new Date(),
                    },
                    $push: {
                        statusHistory: { status: CriminalRecordCertificateStatus.done, date: new Date() },
                    },
                },
            )
            expect(criminalRecordCertificateModel.updateMany).toHaveBeenCalledWith(
                { applicationId: { $in: [] } },
                {
                    $set: {
                        status: CriminalRecordCertificateStatus.cancel,
                    },
                    $push: {
                        statusHistory: { status: CriminalRecordCertificateStatus.cancel, date: new Date() },
                    },
                },
            )
            expect(loggerMock.info).toHaveBeenCalledWith('Updated applications: done 0; refused 0')
        })
    })

    describe('method `downloadCertificateFiles`', () => {
        const applicationId = randomUUID()
        const validCertificate = {
            applicationId,
            status: CriminalRecordCertificateStatus.done,
            receivingApplicationTime: new Date(),
            createdAt: new Date(),
        }
        const validCertificateModel = new criminalRecordCertificateModel(validCertificate)
        const expectedFileName = `vytiah pro nesudymist vid ${moment(validCertificate.createdAt).format('YYYY-MM-DD')}`.replace(/ /g, '_')
        const { identifier: userIdentifier } = user

        it('should successfully download certificate files', async () => {
            const signature = 'signature'
            const document = 'document-content'

            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(validCertificateModel)
            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValueOnce({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'downloadCertificate').mockResolvedValueOnce({ document, signature })
            jest.spyOn(validCertificateModel, 'save').mockResolvedValueOnce(validCertificateModel)
            admZipStubs.toBuffer.mockReturnValueOnce({ toString: admZipStubs.toString })
            admZipStubs.toString.mockReturnValueOnce(document)

            expect(await criminalRecordCertificateService.downloadCertificateFiles(applicationId, user)).toEqual(document)

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                userIdentifier,
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.done] },
            })
            expect(cryptoDocServiceClient.docGenerateSignature).toHaveBeenCalledWith({
                contentBase64: Buffer.from(' ').toString('base64'),
                external: true,
            })
            expect(criminalRecordCertificateProviderMock.downloadCertificate).toHaveBeenCalledWith({
                requestId: applicationId,
                signature,
            })
            expect(admZipStubs.addFile).toHaveBeenCalledWith(`${expectedFileName}.pdf`, Buffer.from(document, 'base64'))
            expect(admZipStubs.addFile).toHaveBeenCalledWith(`${expectedFileName}.p7s`, Buffer.from(signature, 'base64'))
            expect(validCertificateModel.save).toHaveBeenCalledWith()
            expect(validCertificateModel.isDownloadAction).toBeTruthy()
            expect(admZipStubs.toBuffer).toHaveBeenCalledWith()
            expect(admZipStubs.toString).toHaveBeenCalledWith('base64')
        })

        it('should fail with error in case certificate not found', async () => {
            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(null)

            await expect(async () => {
                await criminalRecordCertificateService.downloadCertificateFiles(applicationId, user)
            }).rejects.toEqual(new ModelNotFoundError(criminalRecordCertificateModel.modelName, applicationId))

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                userIdentifier,
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.done] },
            })
            expect(loggerMock.error).toHaveBeenCalledWith('Failed to find criminal certificate ready to download by id', { applicationId })
        })

        it('should fail with error in case document is not found by provider', async () => {
            const signature = 'signature'

            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(validCertificateModel)
            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValueOnce({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'downloadCertificate').mockResolvedValueOnce({})

            await expect(async () => {
                await criminalRecordCertificateService.downloadCertificateFiles(applicationId, user)
            }).rejects.toEqual(new NotFoundError())

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                userIdentifier,
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.done] },
            })
            expect(cryptoDocServiceClient.docGenerateSignature).toHaveBeenCalledWith({
                contentBase64: Buffer.from(' ').toString('base64'),
                external: true,
            })
            expect(criminalRecordCertificateProviderMock.downloadCertificate).toHaveBeenCalledWith({
                requestId: applicationId,
                signature,
            })
        })
    })

    describe('method `downloadCertificatePdf`', () => {
        const applicationId = randomUUID()
        const validCertificate = {
            applicationId,
            status: CriminalRecordCertificateStatus.done,
            receivingApplicationTime: new Date(),
            createdAt: new Date(),
        }
        const validCertificateModel = new criminalRecordCertificateModel(validCertificate)
        const { identifier: userIdentifier } = user

        it('should successfully download certificate pdf', async () => {
            const signature = 'signature'
            const document = 'pdf-document-content'

            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(validCertificateModel)
            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValueOnce({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'downloadCertificate').mockResolvedValueOnce({ document })
            jest.spyOn(validCertificateModel, 'save').mockResolvedValueOnce(validCertificateModel)

            expect(await criminalRecordCertificateService.downloadCertificatePdf(applicationId, user)).toEqual(document)

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.done] },
                userIdentifier,
            })
            expect(cryptoDocServiceClient.docGenerateSignature).toHaveBeenCalledWith({
                contentBase64: Buffer.from(' ').toString('base64'),
                external: true,
            })
            expect(criminalRecordCertificateProviderMock.downloadCertificate).toHaveBeenCalledWith({
                requestId: applicationId,
                signature,
            })
            expect(validCertificateModel.save).toHaveBeenCalledWith()
            expect(validCertificateModel.isViewAction).toBeTruthy()
        })

        it('should fail with error in case certificate not found', async () => {
            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(null)

            await expect(async () => {
                await criminalRecordCertificateService.downloadCertificatePdf(applicationId, user)
            }).rejects.toEqual(new ModelNotFoundError(criminalRecordCertificateModel.modelName, applicationId))

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.done] },
                userIdentifier,
            })
            expect(loggerMock.error).toHaveBeenCalledWith('Failed to find criminal certificate ready to download by id', { applicationId })
        })

        it('should fail with error in case document is not found by provider', async () => {
            const signature = 'signature'

            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(validCertificateModel)
            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValueOnce({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'downloadCertificate').mockResolvedValueOnce({})

            await expect(async () => {
                await criminalRecordCertificateService.downloadCertificatePdf(applicationId, user)
            }).rejects.toEqual(new NotFoundError())

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.done] },
                userIdentifier,
            })
            expect(cryptoDocServiceClient.docGenerateSignature).toHaveBeenCalledWith({
                contentBase64: Buffer.from(' ').toString('base64'),
                external: true,
            })
            expect(criminalRecordCertificateProviderMock.downloadCertificate).toHaveBeenCalledWith({
                requestId: applicationId,
                signature,
            })
        })
    })

    describe('method `getApplicationBirthPlace`', () => {
        it('should successfully get application birth place by internal passport with registration', async () => {
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(internalPassportWithRegistration)

            const expectedResult = {
                birthPlaceDataScreen: {
                    title: '–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è',
                    country: {
                        label: '–ö—Ä–∞—ó–Ω–∞',
                        hint: '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É',
                        value: '–£–∫—Ä–∞—ó–Ω–∞',
                        checkbox: '–ö—Ä–∞—ó–Ω–∏ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É',
                        otherCountry: {
                            label: '–ö—Ä–∞—ó–Ω–∞',
                            hint: '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—Ä–∞—ó–Ω–∏ —Å–∞–º–æ—Å—Ç—ñ–Ω–æ',
                        },
                    },
                    city: {
                        label: '–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç',
                        hint: '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ø–ª—Ç–∞, –û–±—É—Ö—ñ–≤, –í–∞—Å–∏–ª—ñ–≤–∫–∞',
                        description: '–í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –Ω–∞–∑–≤—É, –±–µ–∑ –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ —Ä–∞–π–æ–Ω—É',
                    },
                    nextScreen: CriminalRecordCertificateApplicationScreen.registrationPlace,
                },
            }

            const result = await criminalRecordCertificateService.getApplicationBirthPlace(user)

            expect(result).toEqual(expectedResult)

            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
        })

        it('should successfully get application birth place by internal passport with next screen `nationalities` in case nationalities is empty list', async () => {
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(
                <GetInternalPassportWithRegistrationResponse>{},
            )

            const expectedResult = {
                birthPlaceDataScreen: {
                    title: '–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è',
                    country: {
                        label: '–ö—Ä–∞—ó–Ω–∞',
                        hint: '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É',
                        value: undefined,
                        checkbox: '–ö—Ä–∞—ó–Ω–∏ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É',
                        otherCountry: {
                            label: '–ö—Ä–∞—ó–Ω–∞',
                            hint: '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—Ä–∞—ó–Ω–∏ —Å–∞–º–æ—Å—Ç—ñ–Ω–æ',
                        },
                    },
                    city: {
                        label: '–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç',
                        hint: '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ø–ª—Ç–∞, –û–±—É—Ö—ñ–≤, –í–∞—Å–∏–ª—ñ–≤–∫–∞',
                        description: '–í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –Ω–∞–∑–≤—É, –±–µ–∑ –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ —Ä–∞–π–æ–Ω—É',
                    },
                    nextScreen: CriminalRecordCertificateApplicationScreen.nationalities,
                },
            }

            const result = await criminalRecordCertificateService.getApplicationBirthPlace(user)

            expect(result).toEqual(expectedResult)

            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
        })

        it('should fail with error in case unable to get internal passport with registration', async () => {
            const rejectedError = new ServiceUnavailableError()

            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockRejectedValueOnce(rejectedError)

            await expect(async () => {
                await criminalRecordCertificateService.getApplicationBirthPlace(user)
            }).rejects.toEqual(
                new ServiceUnavailableError('Registry unavailable', ProcessCode.CriminalRecordCertificateSomeRegistryUnavailable),
            )

            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
        })
    })

    describe('method `getApplicationInfo`', () => {
        const { birthDay, identifier: userIdentifier, fName } = user
        const headers = testKit.session.getHeaders()
        const taxpayerCard = testKit.docs.getTaxpayerCard({ docStatus: DocStatus.Ok })

        it.each([
            [
                'application is on start stage and next screen is defined by public service code',
                PublicServiceCode.damagedPropertyRecovery,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(15)
                    jest.spyOn(userServiceMock, 'getUserDocuments').mockResolvedValueOnce({
                        documents: [<UserDocument>(<unknown>{ ...taxpayerCard, documentType: DocumentType.TaxpayerCard })],
                    })
                    jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                    expect(userServiceMock.getUserDocuments).toHaveBeenCalledWith(userIdentifier, [
                        { documentType: DocumentType.TaxpayerCard, docStatus: [DocStatus.Ok, DocStatus.Confirming] },
                    ])
                    expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                        userIdentifier,
                        status: CriminalRecordCertificateStatus.applicationProcessing,
                    })
                },
                {
                    showContextMenu: true,
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    text: criminalRecordCertificateMapperMock.applicationStartMessage,
                    nextScreen: 'requester',
                },
            ],
            [
                'application is on start stage and next screen is default due to provided public service code does not have specific next screen',
                PublicServiceCode.criminalRecordCertificate,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(15)
                    jest.spyOn(userServiceMock, 'getUserDocuments').mockResolvedValueOnce({
                        documents: [<UserDocument>(<unknown>{ ...taxpayerCard, documentType: DocumentType.TaxpayerCard })],
                    })
                    jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                    expect(userServiceMock.getUserDocuments).toHaveBeenCalledWith(userIdentifier, [
                        { documentType: DocumentType.TaxpayerCard, docStatus: [DocStatus.Ok, DocStatus.Confirming] },
                    ])
                    expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                        userIdentifier,
                        status: CriminalRecordCertificateStatus.applicationProcessing,
                    })
                },
                {
                    showContextMenu: true,
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    text: criminalRecordCertificateMapperMock.applicationStartMessage,
                    nextScreen: 'reasons',
                },
            ],
            [
                'application is on start stage and next screen is default due to missing public service code',
                undefined,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(15)
                    jest.spyOn(userServiceMock, 'getUserDocuments').mockResolvedValueOnce({
                        documents: [<UserDocument>(<unknown>{ ...taxpayerCard, documentType: DocumentType.TaxpayerCard })],
                    })
                    jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                    expect(userServiceMock.getUserDocuments).toHaveBeenCalledWith(userIdentifier, [
                        { documentType: DocumentType.TaxpayerCard, docStatus: [DocStatus.Ok, DocStatus.Confirming] },
                    ])
                    expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                        userIdentifier,
                        status: CriminalRecordCertificateStatus.applicationProcessing,
                    })
                },
                {
                    showContextMenu: true,
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    text: criminalRecordCertificateMapperMock.applicationStartMessage,
                    nextScreen: 'reasons',
                },
            ],
            [
                'service is not active',
                PublicServiceCode.criminalRecordCertificate,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(false)
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                },
                {
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    attentionMessage: criminalRecordCertificateMapperMock.serviceIsNotActiveAttentionMessage,
                },
            ],
            [
                'unsuitable age',
                PublicServiceCode.criminalRecordCertificate,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(13)
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                },
                {
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    attentionMessage: criminalRecordCertificateMapperMock.unsuitableAgeAttentionMessage,
                },
            ],
            [
                'confirming taxpayer card',
                PublicServiceCode.criminalRecordCertificate,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(15)
                    jest.spyOn(userServiceMock, 'getUserDocuments').mockResolvedValueOnce({
                        documents: [<UserDocument>(<unknown>{
                                ...testKit.docs.getTaxpayerCard({ docStatus: DocStatus.Confirming }),
                                documentType: DocumentType.TaxpayerCard,
                            })],
                    })
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                    expect(userServiceMock.getUserDocuments).toHaveBeenCalledWith(userIdentifier, [
                        { documentType: DocumentType.TaxpayerCard, docStatus: [DocStatus.Ok, DocStatus.Confirming] },
                    ])
                },
                {
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    attentionMessage: criminalRecordCertificateMapperMock.confirmingTaxpayerCardAttentionMessage,
                },
            ],
            [
                'missing taxpayer card',
                PublicServiceCode.criminalRecordCertificate,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(15)
                    jest.spyOn(userServiceMock, 'getUserDocuments').mockResolvedValueOnce({
                        documents: [],
                    })
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                    expect(userServiceMock.getUserDocuments).toHaveBeenCalledWith(userIdentifier, [
                        { documentType: DocumentType.TaxpayerCard, docStatus: [DocStatus.Ok, DocStatus.Confirming] },
                    ])
                },
                {
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    attentionMessage: criminalRecordCertificateMapperMock.missingTaxpayerCardAttentionMessage,
                },
            ],
            [
                'processing application has already started',
                PublicServiceCode.criminalRecordCertificate,
                (): void => {
                    utilsStubs.isAvailable.mockReturnValueOnce(true)
                    utilsStubs.getAge.mockReturnValueOnce(15)
                    jest.spyOn(userServiceMock, 'getUserDocuments').mockResolvedValueOnce({
                        documents: [<UserDocument>(<unknown>{ ...taxpayerCard, documentType: DocumentType.TaxpayerCard })],
                    })
                    jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(1)
                },
                (): void => {
                    expect(utilsStubs.isAvailable).toHaveBeenCalledWith(publicServiceSettings, user, headers)
                    expect(utilsStubs.getAge).toHaveBeenCalledWith(birthDay)
                    expect(userServiceMock.getUserDocuments).toHaveBeenCalledWith(userIdentifier, [
                        { documentType: DocumentType.TaxpayerCard, docStatus: [DocStatus.Ok, DocStatus.Confirming] },
                    ])
                    expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                        userIdentifier,
                        status: CriminalRecordCertificateStatus.applicationProcessing,
                    })
                },
                {
                    title: '–í—ñ—Ç–∞—î–º–æ, –ù–∞–¥—ñ—è',
                    attentionMessage: criminalRecordCertificateMapperMock.processingApplicationExistsMessage,
                },
            ],
        ])(
            'should successfully get application info when %s',
            async (_msg, publicService, defineSpies, checkExpectations, expectedResult) => {
                defineSpies()
                jest.spyOn(publicServiceCatalogClient, 'getPublicServiceSettings').mockResolvedValueOnce(publicServiceSettings)
                utilsStubs.getGreeting.mockReturnValueOnce(`–í—ñ—Ç–∞—î–º–æ, ${fName}`)

                const result = await criminalRecordCertificateService.getApplicationInfo(user, headers, publicService)

                expect(result).toEqual(expectedResult)

                checkExpectations()

                expect(publicServiceCatalogClient.getPublicServiceSettings).toHaveBeenCalledWith({
                    code: PublicServiceCode.criminalRecordCertificate,
                })
                expect(utilsStubs.getGreeting).toHaveBeenCalledWith(fName)
            },
        )
    })

    describe('method `getApplicationNationalities`', () => {
        it('should successfully get application nationalities by internal passport with registration', async () => {
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(internalPassportWithRegistration)

            const expectedResult = {
                nationalitiesScreen: {
                    title: '–ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ',
                    attentionMessage: {
                        icon: '‚òùÔ∏è',
                        text: '–í–∫–∞–∂—ñ—Ç—å –ª–∏—à–µ –ø–æ—Ç–æ—á–Ω–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ, –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.',
                        parameters: [],
                    },
                    country: {
                        label: '–ö—Ä–∞—ó–Ω–∞',
                        hint: '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É',
                        addAction: {
                            icon: '',
                            name: '–î–æ–¥–∞—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ',
                        },
                    },
                    maxNationalitiesCount: 2,
                    nextScreen: CriminalRecordCertificateApplicationScreen.registrationPlace,
                },
            }

            const result = await criminalRecordCertificateService.getApplicationNationalities(user)

            expect(result).toEqual(expectedResult)

            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
        })

        it('should successfully get application nationalities by internal passport with registration and next screen `contacts`', async () => {
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce({
                ...internalPassportWithRegistration,
                registration: {
                    ...internalPassportWithRegistration.registration,
                    address: {
                        ...internalPassportWithRegistration.registration?.address,
                        settlementType: '–º',
                        settlementName: '–ö–∏—ó–≤',
                    },
                },
            })

            const expectedResult = {
                nationalitiesScreen: {
                    title: '–ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ',
                    attentionMessage: {
                        icon: '‚òùÔ∏è',
                        text: '–í–∫–∞–∂—ñ—Ç—å –ª–∏—à–µ –ø–æ—Ç–æ—á–Ω–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ, –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.',
                        parameters: [],
                    },
                    country: {
                        label: '–ö—Ä–∞—ó–Ω–∞',
                        hint: '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É',
                        addAction: {
                            icon: '',
                            name: '–î–æ–¥–∞—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ',
                        },
                    },
                    maxNationalitiesCount: 2,
                    nextScreen: CriminalRecordCertificateApplicationScreen.contacts,
                },
            }

            const result = await criminalRecordCertificateService.getApplicationNationalities(user)

            expect(result).toEqual(expectedResult)

            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
        })
    })

    describe('method `getApplicationReasons`', () => {
        it('should successfully get application reasons', () => {
            const result = criminalRecordCertificateService.getApplicationReasons()

            expect(result).toEqual({
                title: '–ú–µ—Ç–∞ –∑–∞–ø–∏—Ç—É',
                subtitle: '–î–ª—è —á–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∏—Ç—è–≥?',
                reasons: [
                    {
                        code: '1',
                        name: "–£—Å–∏–Ω–æ–≤–ª–µ–Ω–Ω—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø—ñ–∫–∏ (–ø—ñ–∫–ª—É–≤–∞–Ω–Ω—è), —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–π–æ–º–Ω–æ—ó —Å—ñ–º'—ó –∞–±–æ –¥–∏—Ç—è—á–æ–≥–æ –±—É–¥–∏–Ω–∫—É —Å—ñ–º–µ–π–Ω–æ–≥–æ —Ç–∏–ø—É",
                    },
                    {
                        code: '2',
                        name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≤—ñ–∑–∏ –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω',
                    },
                    {
                        code: '56',
                        name: '–ù–∞–¥–∞–Ω–Ω—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –¥–µ—Ä–∂–∞–≤',
                    },
                    {
                        code: '5',
                        name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω–∞ —Ä–æ–±–æ—Ç—É',
                    },
                    {
                        code: '55',
                        name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ –∑–±—Ä–æ—é, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–∞ —Ä–æ–±–æ—Ç—É –∑ –≤–∏–±—É—Ö–æ–≤–∏–º–∏ —Ä–µ—á–æ–≤–∏–Ω–∞–º–∏',
                    },
                    {
                        code: '7',
                        name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–∞ —Ä–æ–±–æ—Ç—É –∑ –Ω–∞—Ä–∫–æ—Ç–∏—á–Ω–∏–º–∏ –∑–∞—Å–æ–±–∞–º–∏, –ø—Å–∏—Ö–æ—Ç—Ä–æ–ø–Ω–∏–º–∏ —Ä–µ—á–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –ø—Ä–µ–∫—É—Ä—Å–æ—Ä–∞–º–∏',
                    },
                    {
                        code: '37',
                        name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä—ñ –∑–∞–∫—É–ø—ñ–≤–µ–ª—å',
                    },
                    {
                        code: '9',
                        name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞',
                    },
                    {
                        code: '63',
                        name: '–ü–æ–¥–∞–Ω–Ω—è –¥–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É –∫–æ–º–ø–ª–µ–∫—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏',
                    },
                    {
                        code: '44',
                        name: "–ü—Ä–µ–¥'—è–≤–ª–µ–Ω–Ω—è –∑–∞ –º—ñ—Å—Ü–µ–º –≤–∏–º–æ–≥–∏",
                    },
                ],
            })
        })
    })

    describe('method `getApplicationRequester`', () => {
        it('should successfully get application requester by internal passport with registration', async () => {
            const { lName, fName, mName } = user
            const fullName = `${lName} ${fName} ${mName}`

            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(internalPassportWithRegistration)
            utilsStubs.getUserFullName.mockReturnValueOnce(fullName)

            const expectedResult = {
                requesterDataScreen: {
                    title: '–ó–º—ñ–Ω–∞ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö',
                    attentionMessage: {
                        icon: '‚òùÔ∏èÔ∏è',
                        text: '–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ü–Ü–ë, —è–∫—â–æ –∑–º—ñ–Ω—é–≤–∞–ª–∏ —ó—Ö. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–æ–≥–æ –ø–æ—à—É–∫—É –¥–∞–Ω–∏—Ö —É —Ä–µ—î—Å—Ç—Ä–∞—Ö.',
                        parameters: [],
                    },
                    fullName: {
                        label: '–ü—Ä—ñ–∑–≤–∏—â–µ, —ñ–º º—è, –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ',
                        value: fullName,
                    },
                    nextScreen: CriminalRecordCertificateApplicationScreen.birthPlace,
                },
            }

            const result = await criminalRecordCertificateService.getApplicationRequester(user)

            expect(result).toEqual(expectedResult)

            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
            expect(utilsStubs.getUserFullName).toHaveBeenCalledWith(user)
        })
    })

    describe('method `getApplicationTypes`', () => {
        it('should successfully get application types', () => {
            expect(criminalRecordCertificateService.getApplicationTypes()).toEqual({
                title: '–¢–∏–ø –≤–∏—Ç—è–≥—É',
                subtitle: '–Ø–∫–∏–π —Ç–∏–ø –≤–∏—Ç—è–≥—É –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω?',
                types: criminalRecordCertificateProviderMock.types,
            })
        })
    })

    describe('method `getContacts`', () => {
        it('should successfully get contacts', () => {
            const { phoneNumber, email } = user

            expect(criminalRecordCertificateService.getContacts(user)).toEqual({
                title: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ',
                text: '–î–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –∑ BankID. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—Ö, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äì –≤–∏–ø—Ä–∞–≤—Ç–µ.',
                attentionMessage: undefined,
                phoneNumber,
                email,
            })
        })
    })

    describe('method `getCriminalRecordCertificateById`', () => {
        const headers = testKit.session.getHeaders()
        const { identifier: userIdentifier } = user
        const applicationId = randomUUID()
        const validCertificate = {
            userIdentifier,
            applicationId,
            status: CriminalRecordCertificateStatus.done,
            receivingApplicationTime: new Date(),
            statusHistory: [{ status: CriminalRecordCertificateStatus.done, date: new Date() }],
        }
        const ratingFormResponse = {
            ratingStartsAtUnixTime: new Date().getTime(),
            ratingForm: {
                comment: {
                    hint: 'hint',
                    label: 'label',
                },
                mainButton: 'Main button',
                rating: {
                    items: [],
                    label: 'rating',
                },
                title: 'title',
                resourceId: randomUUID(),
            },
        }
        const applicationDetails = {
            title: '–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å',
            statusMessage: {
                title: '–ó–∞–ø–∏—Ç –ø–æ–ª–µ—Ç—ñ–≤ –≤ –æ–±—Ä–æ–±–∫—É',
                text: '–ë—ñ–ª—å—à—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –æ–ø—Ä–∞—Ü—å–æ–≤—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏—Ç—è–≥—É —Ç—Ä–∏–≤–∞—î –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω. –ü—Ä–æ—Ç–µ —á–∞—Å–æ–º –¥–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –¢–æ–¥—ñ –≤–∏—Ç—è–≥ –≥–æ—Ç—É—é—Ç—å –≤—Ä—É—á–Ω—É. –ó–∞–∑–≤–∏—á–∞–π —Ü–µ —Ç—Ä–∏–≤–∞—î –¥–æ 10 –¥–Ω—ñ–≤, —ñ–Ω–∫–æ–ª–∏ ‚Äî –¥–æ 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                icon: '‚è≥',
                parameters: [],
            },
            status: CriminalRecordCertificateStatus.applicationProcessing,
            loadActions: [],
        }

        it.each([
            [
                'rating form exists',
                new criminalRecordCertificateModel(validCertificate),
                {
                    navigationPanel: {
                        contextMenu: [],
                    },
                    ...applicationDetails,
                    contextMenu: [],
                    ratingForm: ratingFormResponse.ratingForm,
                },
            ],
            [
                'rating form does not exist due to certificate status is not `done`',
                new criminalRecordCertificateModel({ ...validCertificate, status: CriminalRecordCertificateStatus.applicationProcessing }),
                {
                    navigationPanel: {
                        contextMenu: [],
                    },
                    ...applicationDetails,
                    contextMenu: [],
                    ratingForm: undefined,
                },
            ],
            [
                'rating form does not exist due to inability to find `done` status in certificate status history',
                new criminalRecordCertificateModel({ ...validCertificate, statusHistory: [] }),
                {
                    navigationPanel: {
                        contextMenu: [],
                    },
                    ...applicationDetails,
                    contextMenu: [],
                    ratingForm: undefined,
                },
            ],
        ])('should successfully get criminal record certificate by id when %s', async (_msg, validCertificateModel, expectedResult) => {
            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(validCertificateModel)
            jest.spyOn(publicServiceCatalogClient, 'getPublicServiceSettings').mockResolvedValueOnce(publicServiceSettings)
            jest.spyOn(analyticsServiceMock, 'getRatingForm').mockResolvedValueOnce(ratingFormResponse)
            utilsStubs.extractContextMenu.mockReturnValueOnce(undefined)
            utilsStubs.extractNavigationPanel.mockReturnValueOnce({
                contextMenu: [],
            })
            jest.spyOn(criminalRecordCertificateMapperMock, 'toApplicationDetails').mockReturnValueOnce(applicationDetails)

            expect(await criminalRecordCertificateService.getCriminalRecordCertificateById(user, headers, applicationId)).toEqual(
                expectedResult,
            )

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                userIdentifier,
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.applicationProcessing, CriminalRecordCertificateStatus.done] },
            })
            expect(publicServiceCatalogClient.getPublicServiceSettings).toHaveBeenCalledWith({
                code: PublicServiceCode.criminalRecordCertificate,
            })
            expect(analyticsServiceMock.getRatingForm).toHaveBeenCalledWith({
                userIdentifier,
                statusDate: validCertificate.statusHistory[0].date,
                category: RatingCategory.PublicService,
                serviceCode: PublicServiceKebabCaseCode.CriminalRecordCertificate,
                resourceId: validCertificate.applicationId,
            })
            expect(utilsStubs.extractContextMenu).toHaveBeenCalledWith(publicServiceSettings, headers)
            expect(utilsStubs.extractNavigationPanel).toHaveBeenCalledWith(publicServiceSettings, headers)
            expect(criminalRecordCertificateMapperMock.toApplicationDetails).toHaveBeenCalledWith(validCertificateModel)
        })

        it('should fail with error in case certificate not found', async () => {
            jest.spyOn(criminalRecordCertificateModel, 'findOne').mockResolvedValueOnce(null)

            await expect(async () => {
                await criminalRecordCertificateService.getCriminalRecordCertificateById(user, headers, applicationId)
            }).rejects.toEqual(new ModelNotFoundError(criminalRecordCertificateModel.modelName, applicationId))

            expect(criminalRecordCertificateModel.findOne).toHaveBeenCalledWith({
                userIdentifier,
                applicationId,
                status: { $in: [CriminalRecordCertificateStatus.applicationProcessing, CriminalRecordCertificateStatus.done] },
            })
            expect(loggerMock.error).toHaveBeenCalledWith('Failed to find criminal certificate by id', { applicationId })
        })
    })

    describe('method `getCriminalRecordCertificatesByStatus`', () => {
        const headers = testKit.session.getHeaders()
        const { identifier: userIdentifier } = user
        const applicationId = randomUUID()
        const validProcessingCertificate = {
            userIdentifier,
            applicationId,
            status: CriminalRecordCertificateStatus.applicationProcessing,
            receivingApplicationTime: new Date(),
        }
        const certificatesToCheck = [new criminalRecordCertificateModel(validProcessingCertificate)]
        const status = CriminalRecordCertificateStatus.done
        const statusFilterInfo = {
            code: status,
            name: '–ì–æ—Ç–æ–≤—ñ',
        }
        const navigationPanel = {
            contextMenu: [],
        }

        it('should successfully get certificates by status', async () => {
            const validDoneCertificateModel = new criminalRecordCertificateModel({
                userIdentifier,
                applicationId,
                status: CriminalRecordCertificateStatus.done,
                receivingApplicationTime: new Date(),
            })
            const skip = 0
            const limit = 10
            const certificates = [
                {
                    applicationId,
                    creationDate: moment().format(config.app.dateFormat),
                    reason: 'reason',
                    status: CriminalRecordCertificateStatus.done,
                    type: 'type',
                },
            ]
            const sortSpy = jest.fn()
            const skipSpy = jest.fn()
            const limitSpy = jest.fn()

            jest.spyOn(criminalRecordCertificateMapperMock, 'toStatusFilterInfo').mockReturnValueOnce(statusFilterInfo)
            jest.spyOn(criminalRecordCertificateModel, 'find').mockResolvedValueOnce(certificatesToCheck)
            jest.spyOn(criminalRecordCertificateService, 'checkApplicationsStatuses').mockResolvedValueOnce()
            jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(1)
            jest.spyOn(publicServiceCatalogClient, 'getPublicServiceSettings').mockResolvedValueOnce(publicServiceSettings)
            utilsStubs.extractNavigationPanel.mockReturnValueOnce(navigationPanel)
            limitSpy.mockResolvedValueOnce([validDoneCertificateModel])
            skipSpy.mockReturnValueOnce({ limit: limitSpy })
            sortSpy.mockReturnValueOnce({ skip: skipSpy })
            jest.spyOn(criminalRecordCertificateModel, 'find').mockReturnValueOnce(<
                Query<unknown[], unknown, unknown, CriminalRecordCertificate, 'find'>
            >(<unknown>{ sort: sortSpy }))
            jest.spyOn(criminalRecordCertificateMapperMock, 'toResponseItem').mockReturnValueOnce(certificates[0])

            expect(await criminalRecordCertificateService.getCriminalRecordCertificatesByStatus(user, headers, status, limit)).toEqual({
                navigationPanel,
                certificatesStatus: statusFilterInfo,
                certificates,
                total: 1,
            })

            expect(criminalRecordCertificateMapperMock.toStatusFilterInfo).toHaveBeenCalledWith(status)
            expect(criminalRecordCertificateModel.find).toHaveBeenCalledWith({
                userIdentifier,
                status: CriminalRecordCertificateStatus.applicationProcessing,
            })
            expect(criminalRecordCertificateService.checkApplicationsStatuses).toHaveBeenCalledWith(certificatesToCheck, [])
            expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({ userIdentifier, status })
            expect(publicServiceCatalogClient.getPublicServiceSettings).toHaveBeenCalledWith({
                code: PublicServiceCode.criminalRecordCertificate,
            })
            expect(utilsStubs.extractNavigationPanel).toHaveBeenCalledWith(publicServiceSettings, headers)
            expect(criminalRecordCertificateModel.find).toHaveBeenCalledWith({ userIdentifier, status })
            expect(sortSpy).toHaveBeenCalledWith({ _id: -1 })
            expect(skipSpy).toHaveBeenCalledWith(skip)
            expect(limitSpy).toHaveBeenCalledWith(limit)
            expect(criminalRecordCertificateMapperMock.toResponseItem).toHaveBeenCalledWith(validDoneCertificateModel)
        })

        it('should get empty list of certificates by status', async () => {
            jest.spyOn(criminalRecordCertificateMapperMock, 'toStatusFilterInfo').mockReturnValueOnce(statusFilterInfo)
            jest.spyOn(criminalRecordCertificateModel, 'find').mockResolvedValueOnce(certificatesToCheck)
            jest.spyOn(criminalRecordCertificateService, 'checkApplicationsStatuses').mockResolvedValueOnce()
            jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
            jest.spyOn(publicServiceCatalogClient, 'getPublicServiceSettings').mockResolvedValueOnce(publicServiceSettings)
            utilsStubs.extractNavigationPanel.mockReturnValueOnce(navigationPanel)

            expect(await criminalRecordCertificateService.getCriminalRecordCertificatesByStatus(user, headers, status, 10)).toEqual({
                navigationPanel,
                certificatesStatus: statusFilterInfo,
                stubMessage: {
                    icon: 'ü§∑‚Äç‚ôÇÔ∏è',
                    text: '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≥–æ—Ç–æ–≤–∏—Ö –≤–∏—Ç—è–≥—ñ–≤. \n–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ, –∫–æ–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω—ñ –≤–∏—Ç—è–≥–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ.',
                    parameters: [],
                },
                certificates: [],
                total: 0,
            })

            expect(criminalRecordCertificateMapperMock.toStatusFilterInfo).toHaveBeenCalledWith(status)
            expect(criminalRecordCertificateModel.find).toHaveBeenCalledWith({
                userIdentifier,
                status: CriminalRecordCertificateStatus.applicationProcessing,
            })
            expect(criminalRecordCertificateService.checkApplicationsStatuses).toHaveBeenCalledWith(certificatesToCheck, [])
            expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({ userIdentifier, status })
            expect(publicServiceCatalogClient.getPublicServiceSettings).toHaveBeenCalledWith({
                code: PublicServiceCode.criminalRecordCertificate,
            })
            expect(utilsStubs.extractNavigationPanel).toHaveBeenCalledWith(publicServiceSettings, headers)
        })
    })

    describe('method `prepareTasksToCheckApplicationsStatus`', () => {
        it('should successfully prepare tasks to check applications status', async () => {
            const cursorSpy = jest.fn()
            const applications = [
                new criminalRecordCertificateModel({}),
                new criminalRecordCertificateModel({}),
                new criminalRecordCertificateModel({}),
                new criminalRecordCertificateModel({}),
                new criminalRecordCertificateModel({}),
            ]

            cursorSpy.mockReturnValueOnce(
                (async function* (): unknown {
                    yield applications[0]
                    yield applications[1]
                    yield applications[2]
                    yield applications[3]
                    yield applications[4]
                })(),
            )

            jest.spyOn(criminalRecordCertificateModel, 'find').mockReturnValueOnce(<
                Query<unknown[], unknown, unknown, CriminalRecordCertificate, 'find'>
            >(<unknown>{ cursor: cursorSpy }))
            jest.spyOn(taskMock, 'publish').mockResolvedValue(true)

            await criminalRecordCertificateService.prepareTasksToCheckApplicationsStatus()

            expect(criminalRecordCertificateModel.find).toHaveBeenCalledWith(
                { status: CriminalRecordCertificateStatus.applicationProcessing },
                {
                    applicationId: 1,
                    mobileUid: 1,
                    userIdentifier: 1,
                    notifications: 1,
                    publicService: 1,
                    createdAt: 1,
                },
            )
            expect(cursorSpy).toHaveBeenCalledWith()
            expect(taskMock.publish).toHaveBeenCalledWith(
                ServiceTask.CheckCriminalRecordCertificateApplications,
                {
                    applications: [applications[0], applications[1], applications[2]],
                },
                0,
            )
            expect(taskMock.publish).toHaveBeenCalledWith(
                ServiceTask.CheckCriminalRecordCertificateApplications,
                {
                    applications: [applications[3], applications[4]],
                },
                config.sevdeir.criminalRecordCertificate.checkIntervalMs,
            )
            expect(loggerMock.info).toHaveBeenCalledWith('Prepared 1 batches to check criminal record certificate status')
        })
    })

    describe('method `sendApplication`', () => {
        const headers = testKit.session.getHeaders()
        const { identifier: userIdentifier, phoneNumber, email, fName, lName, mName, birthDay, itn, gender } = user
        const { mobileUid } = headers

        const applicationData = {
            nationalities: [],
            phoneNumber,
            email,
            reasonId: '5',
            certificateType: CriminalRecordCertificateType.full,
            registrationAddressId: randomUUID(),
            birthPlace: {
                city: 'City',
                country: 'Country',
            },
        }
        const registrationAddress = {
            address: {},
        }
        const requestData = {
            itn,
            reasonId: '5',
            certificateType: CriminalRecordCertOrderType.Full.toLowerCase(),
            firstName: fName,
            lastName: lName,
            middleName: mName,
            previousFirstName: undefined,
            previousLastName: undefined,
            previousMiddleName: undefined,
            gender: gender.toLowerCase(),
            birthDate: birthDay,
            birthCountry: 'Country',
            birthCity: 'City',
            registrationCountry: undefined,
            registrationRegion: undefined,
            registrationDistrict: undefined,
            registrationCity: undefined,
            nationalities: ['–£–∫—Ä–∞—ó–Ω–∞'],
            nationalitiesAlfa3: ['UKR'],
            email,
            phoneNumber,
        }
        const providerRequest = {
            firstName: fName,
            lastName: lName,
            middleName: mName,
            firstNameChanged: false,
            lastNameChanged: false,
            middleNameChanged: false,
            gender: <CriminalRecordCertOrderGender>requestData.gender,
            birthDate: birthDay,
            birthCountry: requestData.birthCountry,
            birthRegion: 'Region',
            birthDistrict: 'District',
            birthCity: requestData.birthCity,
            registrationCountry: 'Country',
            registrationRegion: 'Region',
            registrationDistrict: 'District',
            registrationCity: 'City',
            nationality: requestData.nationalities[0],
            phone: phoneNumber,
            type: <CriminalRecordCertOrderType>requestData.certificateType,
            purpose: requestData.reasonId,
            clientId: randomUUID(),
        }
        const signature = 'signature'
        const sentApplicationId = 11111111111
        const applicationId = String(11111111111)
        const sendStatus = CriminalRecordCertOrderStatus.Completed
        const status = CriminalRecordCertificateStatus.done

        it.each([
            [
                'nationalities are defined by internal passport',
                { ...registrationAddress },
                { ...requestData },
                {
                    internalPassport: testKit.docs.getInternalPassport(),
                    identityType: IdentityDocumentType.InternalPassport,
                },
                {
                    ...requestData,
                },
                {
                    applicationId,
                    processCode: ProcessCode.CriminalRecordCertificateHasBeenSent,
                },
            ],
            [
                'residence permit permanent not found',
                { ...registrationAddress },
                {
                    ...requestData,
                    nationalitiesAlfa3: [],
                },
                {
                    identityType: IdentityDocumentType.ResidencePermitPermanent,
                },
                {
                    ...requestData,
                    nationalities: [],
                    nationalitiesAlfa3: undefined,
                },
                {
                    applicationId,
                    processCode: ProcessCode.CriminalRecordCertificateHasBeenSent,
                },
            ],
            [
                'nationalities are defined by residence permit permanent',
                { ...registrationAddress },
                {
                    ...requestData,
                    nationalitiesAlfa3: ['BTN', 'GRL'],
                    nationalities: ['–ë—É—Ç–∞–Ω', '–ì—Ä–µ–Ω–ª–∞–Ω–¥—ñ—è'],
                    registrationCountry: '–£–∫—Ä–∞—ó–Ω–∞',
                },
                {
                    residencePermit: testKit.docs.getResidencePermit(),
                    identityType: IdentityDocumentType.ResidencePermitPermanent,
                },
                {
                    ...requestData,
                    nationalitiesAlfa3: ['BTN', 'GRL'],
                    nationalities: ['–ë—É—Ç–∞–Ω', '–ì—Ä–µ–Ω–ª–∞–Ω–¥—ñ—è'],
                    registrationCountry: '–£–∫—Ä–∞—ó–Ω–∞',
                },
                {
                    applicationId,
                    processCode: ProcessCode.CriminalRecordCertificateHasBeenSent,
                },
            ],
            [
                'registration district exists but registration city does not exist in address',
                { ...registrationAddress, address: { district: { value: 'District' } } },
                {
                    ...requestData,
                },
                {
                    internalPassport: testKit.docs.getInternalPassport(),
                    identityType: IdentityDocumentType.InternalPassport,
                },
                {
                    ...requestData,
                },
                {
                    applicationId,
                    processCode: ProcessCode.CriminalRecordCertificateHasBeenSent,
                },
            ],
            [
                'registration region exists but registration district and city does not exist in address',
                { ...registrationAddress, address: { region: { value: 'Region' } } },
                {
                    ...requestData,
                },
                {
                    internalPassport: testKit.docs.getInternalPassport(),
                    identityType: IdentityDocumentType.InternalPassport,
                },
                {
                    ...requestData,
                },
                {
                    applicationId,
                    processCode: ProcessCode.CriminalRecordCertificateHasBeenSent,
                },
            ],
        ])(
            'should successfully send criminal certificate application when %s',
            async (_msg, actualRegistrationAddress, actualRequestData, actualIdentityDocument, expectedRequestData, expectedResult) => {
                jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
                jest.spyOn(addressServiceMock, 'getPublicServiceAddress').mockResolvedValueOnce(actualRegistrationAddress)
                jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(
                    <GetInternalPassportWithRegistrationResponse>{},
                )
                jest.spyOn(documentsServiceMock, 'getIdentityDocument').mockResolvedValueOnce(actualIdentityDocument)
                jest.spyOn(criminalRecordCertificateMapperMock, 'toProviderRequest').mockReturnValueOnce(providerRequest)
                jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValueOnce({ signature })
                jest.spyOn(criminalRecordCertificateProviderMock, 'sendApplication').mockResolvedValueOnce({
                    id: sentApplicationId,
                    status: sendStatus,
                })
                jest.spyOn(criminalRecordCertificateModel, 'create').mockResolvedValueOnce([])
                jest.spyOn(notificationServiceMock, 'createNotificationWithPushesByMobileUid').mockResolvedValueOnce()
                jest.spyOn(analyticsServiceMock, 'notifyRate').mockResolvedValueOnce()

                expect(await criminalRecordCertificateService.sendApplication(user, headers, applicationData)).toEqual(expectedResult)

                expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                    userIdentifier,
                    status: CriminalRecordCertificateStatus.applicationProcessing,
                })
                expect(addressServiceMock.getPublicServiceAddress).toHaveBeenCalledWith(applicationData.registrationAddressId)
                expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
                expect(documentsServiceMock.getIdentityDocument).toHaveBeenCalledWith(user)
                expect(criminalRecordCertificateMapperMock.toProviderRequest).toHaveBeenCalledWith(expectedRequestData)
                expect(criminalRecordCertificateProviderMock.sendApplication).toHaveBeenCalledWith({
                    ...providerRequest,
                    signature,
                })
                expect(criminalRecordCertificateModel.create).toHaveBeenCalledWith({
                    userIdentifier,
                    mobileUid,
                    applicationId,
                    reason: {
                        code: actualRequestData.reasonId,
                        name: criminalRecordCertificateProviderMock.reasons.get(actualRequestData.reasonId),
                    },
                    type: actualRequestData.certificateType,
                    sendingRequestTime: new Date(),
                    receivingApplicationTime: new Date(),
                    isDownloadAction: false,
                    isViewAction: false,
                    applicant: {
                        applicantIdentifier: userIdentifier,
                        applicantMobileUid: mobileUid,
                        nationality: actualRequestData.nationalitiesAlfa3,
                    },
                    publicService: undefined,
                    status,
                    statusHistory: [{ status, date: new Date() }],
                    notifications: {},
                })
                expect(notificationServiceMock.createNotificationWithPushesByMobileUid).toHaveBeenCalledWith({
                    templateCode: MessageTemplateCode.CriminalRecordCertificateApplicationDone,
                    userIdentifier,
                    mobileUid,
                    resourceId: applicationId,
                })
                expect(analyticsServiceMock.notifyRate).toHaveBeenCalledWith({
                    userIdentifier,
                    category: RatingCategory.PublicService,
                    serviceCode: PublicServiceKebabCaseCode.CriminalRecordCertificate,
                    resourceId: applicationId,
                })
            },
        )

        it(`should try to send criminal certificate application when send process is more than one in progress`, async () => {
            jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
            jest.spyOn(addressServiceMock, 'getPublicServiceAddress').mockResolvedValueOnce(registrationAddress)
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(
                <GetInternalPassportWithRegistrationResponse>{},
            )
            jest.spyOn(documentsServiceMock, 'getIdentityDocument').mockResolvedValueOnce({
                identityType: IdentityDocumentType.InternalPassport,
                internalPassport: testKit.docs.getInternalPassport(),
            })
            jest.spyOn(criminalRecordCertificateMapperMock, 'toProviderRequest').mockReturnValueOnce(providerRequest)
            jest.spyOn(cryptoDocServiceClient, 'docGenerateSignature').mockResolvedValueOnce({ signature })
            jest.spyOn(criminalRecordCertificateProviderMock, 'sendApplication').mockResolvedValueOnce({
                id: sentApplicationId,
                status: CriminalRecordCertOrderStatus.MoreThanOneInProgress,
            })

            expect(await criminalRecordCertificateService.sendApplication(user, headers, applicationData)).toEqual({
                processCode: ProcessCode.CriminalRecordCertificateMoreThenOneInProgress,
            })

            expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                userIdentifier,
                status: CriminalRecordCertificateStatus.applicationProcessing,
            })
            expect(addressServiceMock.getPublicServiceAddress).toHaveBeenCalledWith(applicationData.registrationAddressId)
            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
            expect(documentsServiceMock.getIdentityDocument).toHaveBeenCalledWith(user)
            expect(criminalRecordCertificateMapperMock.toProviderRequest).toHaveBeenCalledWith(requestData)
            expect(criminalRecordCertificateProviderMock.sendApplication).toHaveBeenCalledWith({
                ...providerRequest,
                signature,
            })
        })

        it(`should fail in case residence is not able to fetch identity`, async () => {
            const rejectedError = new Error('Unexpected error')

            jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(0)
            jest.spyOn(addressServiceMock, 'getPublicServiceAddress').mockResolvedValueOnce(registrationAddress)
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(
                <GetInternalPassportWithRegistrationResponse>{},
            )
            jest.spyOn(documentsServiceMock, 'getIdentityDocument').mockRejectedValueOnce(rejectedError)

            await expect(async () => {
                await criminalRecordCertificateService.sendApplication(user, headers, applicationData)
            }).rejects.toEqual(
                new ServiceUnavailableError('Registry unavailable', ProcessCode.CriminalRecordCertificateSomeRegistryUnavailable),
            )

            expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                userIdentifier,
                status: CriminalRecordCertificateStatus.applicationProcessing,
            })
            expect(addressServiceMock.getPublicServiceAddress).toHaveBeenCalledWith(applicationData.registrationAddressId)
            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
            expect(documentsServiceMock.getIdentityDocument).toHaveBeenCalledWith(user)
            expect(loggerMock.info).toHaveBeenCalledWith('Failed to get user identity document', { err: rejectedError })
        })

        it('should fail in case processing application exists', async () => {
            jest.spyOn(criminalRecordCertificateModel, 'countDocuments').mockResolvedValueOnce(1)

            await expect(async () => {
                await criminalRecordCertificateService.sendApplication(user, headers, applicationData)
            }).rejects.toEqual(new BadRequestError('', {}, ProcessCode.CriminalRecordCertificateMoreThenOneInProgress))

            expect(criminalRecordCertificateModel.countDocuments).toHaveBeenCalledWith({
                userIdentifier,
                status: CriminalRecordCertificateStatus.applicationProcessing,
            })
        })
    })

    describe('method `sendApplicationConfirmation`', () => {
        it('should successfully send application confirmation', async () => {
            const { phoneNumber, email, fName, lName, mName, birthDay, itn, gender } = user
            const applicationData = {
                nationalities: [],
                phoneNumber,
                email,
                reasonId: '5',
                certificateType: CriminalRecordCertificateType.full,
                registrationAddressId: randomUUID(),
                birthPlace: {
                    city: 'City',
                    country: 'Country',
                },
            }
            const registrationAddress = {
                address: {},
            }
            const applicationConfirmationResponse = {
                title: '–ó–∞–ø–∏—Ç –ø—Ä–æ –Ω–∞–¥–∞–Ω–Ω—è –≤–∏—Ç—è–≥—É –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å',
                attentionMessage: {
                    icon: '‚òùÔ∏è',
                    text: '–£–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –∑–∞–º–æ–≤–∏—Ç–∏ –≤–∏—Ç—è–≥.',
                    parameters: [],
                },
                applicant: {
                    title: '–î–∞–Ω—ñ –ø—Ä–æ –∑–∞—è–≤–Ω–∏–∫–∞',
                    fullName: {
                        label: '–ü–Ü–ë:',
                        value: [lName, fName, mName].join(' '),
                    },
                    previousLastName: undefined,
                    previousFirstName: undefined,
                    previousMiddleName: undefined,
                    gender: {
                        label: '–°—Ç–∞—Ç—å:',
                        value: gender,
                    },
                    nationality: {
                        label: '–ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ:',
                        value: '–£–∫—Ä–∞—ó–Ω–∞',
                    },
                    birthDate: {
                        label: '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:',
                        value: birthDay,
                    },
                    birthPlace: {
                        label: '–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:',
                        value: '–£–∫—Ä–∞—ó–Ω–∞',
                    },
                    registrationAddress: {
                        label: '–ú—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è:',
                        value: '–£–∫—Ä–∞—ó–Ω–∞',
                    },
                },
                contacts: {
                    title: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ',
                    phoneNumber: {
                        label: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:',
                        value: phoneNumber,
                    },
                    email: {
                        label: 'Email:',
                        value: email,
                    },
                },
                certificateType: {
                    title: '–¢–∏–ø –≤–∏—Ç—è–≥—É',
                    type: applicationData.certificateType,
                },
                reason: {
                    title: '–ú–µ—Ç–∞ –∑–∞–ø–∏—Ç—É',
                    reason: String(criminalRecordCertificateProviderMock.reasons.get(applicationData.reasonId)),
                },
                checkboxName: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö —É –∑–∞—è–≤—ñ –¥–∞–Ω–∏—Ö',
            }
            const requestData = {
                itn,
                reasonId: '5',
                certificateType: CriminalRecordCertOrderType.Full.toLowerCase(),
                firstName: fName,
                lastName: lName,
                middleName: mName,
                previousFirstName: undefined,
                previousLastName: undefined,
                previousMiddleName: undefined,
                gender: gender.toLowerCase(),
                birthDate: birthDay,
                birthCountry: 'Country',
                birthCity: 'City',
                registrationCountry: undefined,
                registrationRegion: undefined,
                registrationDistrict: undefined,
                registrationCity: undefined,
                nationalities: ['–£–∫—Ä–∞—ó–Ω–∞'],
                nationalitiesAlfa3: ['UKR'],
                email,
                phoneNumber,
            }
            const reasonLabel = '–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω–∞ —Ä–æ–±–æ—Ç—É'
            const certificateTypeDescription =
                '–ü—Ä–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –¥–æ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ; –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—É–¥–∏–º–æ—Å—Ç—ñ; –æ–±–º–µ–∂–µ–Ω–Ω—è, –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ-–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ–º'

            jest.spyOn(addressServiceMock, 'getPublicServiceAddress').mockResolvedValueOnce(registrationAddress)
            jest.spyOn(documentsServiceMock, 'getInternalPassportWithRegistration').mockResolvedValueOnce(<
                GetInternalPassportWithRegistrationResponse
            >{ passport: {} })
            jest.spyOn(criminalRecordCertificateMapperMock, 'toApplicationConfirmationResponse').mockReturnValueOnce(
                applicationConfirmationResponse,
            )

            const result = await criminalRecordCertificateService.sendApplicationConfirmation(user, applicationData)

            expect(result).toEqual({ application: applicationConfirmationResponse })

            expect(addressServiceMock.getPublicServiceAddress).toHaveBeenCalledWith(applicationData.registrationAddressId)
            expect(documentsServiceMock.getInternalPassportWithRegistration).toHaveBeenCalledWith(user, true)
            expect(criminalRecordCertificateMapperMock.toApplicationConfirmationResponse).toHaveBeenCalledWith(
                requestData,
                reasonLabel,
                certificateTypeDescription,
            )
        })
    })
})
