import moment from 'moment'

import { AttentionMessage, Gender } from '@diia-inhouse/types'
import { utils } from '@diia-inhouse/utils'

import {
    CriminalRecordCertificateApplicationConfirmationApplication,
    CriminalRecordCertificateApplicationDetails,
    CriminalRecordCertificateApplicationLoadActionType,
    CriminalRecordCertificateItem,
    CriminalRecordCertificateStatus,
    CriminalRecordCertificateStatusFilterInfo,
    CriminalRecordCertificateType,
} from '@src/generated'

import AssetsService from '@services/assets'

import { AppConfig } from '@interfaces/config'
import { CriminalRecordCertificateModel } from '@interfaces/models/criminalRecordCertificate'
import {
    CriminalRecordCertOrderGender,
    CriminalRecordCertOrderRequest,
    CriminalRecordCertOrderType,
} from '@interfaces/providers/criminalRecordCertificate'
import { Icon } from '@interfaces/services/assets'
import { CriminalRecordCertificateApplicationRequestData } from '@interfaces/services/criminalRecordCertificate'

export default class CriminalRecordCertificateMapper {
    constructor(
        private readonly assetsService: AssetsService,
        private readonly config: AppConfig,
    ) {}

    readonly providerDateFormat = 'YYYY-MM-DD'

    readonly noCertificatesByStatusMessage: Partial<Record<CriminalRecordCertificateStatus, AttentionMessage>> = {
        [CriminalRecordCertificateStatus.applicationProcessing]: {
            icon: 'ü§∑‚Äç‚ôÇÔ∏èÔ∏è',
            text: '–û–π, —Ç—É—Ç –ø–æ—Ä–æ–∂–Ω—å–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ —Ä–æ–∑–¥—ñ–ª—ñ –ì–æ—Ç–æ–≤—ñ –∞–±–æ –∑–∞–º–æ–≤—Ç–µ –Ω–æ–≤—ñ –≤–∏—Ç—è–≥–∏.',
            parameters: [],
        },
        [CriminalRecordCertificateStatus.done]: {
            icon: 'ü§∑‚Äç‚ôÇÔ∏è',
            text: '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≥–æ—Ç–æ–≤–∏—Ö –≤–∏—Ç—è–≥—ñ–≤. \n–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ, –∫–æ–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω—ñ –≤–∏—Ç—è–≥–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ.',
            parameters: [],
        },
    }

    readonly processingApplicationExistsMessage: AttentionMessage = {
        icon: 'üòû',
        text: '–ù–∞—Ä–∞–∑—ñ –ø–æ—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É —Ç–∞ –∑–∞–º–æ–≤—Ç–µ –Ω–æ–≤–∏–π –≤–∏—Ç—è–≥.',
        parameters: [],
    }

    private readonly statusMessageByStatus: Partial<Record<CriminalRecordCertificateStatus, AttentionMessage>> = {
        [CriminalRecordCertificateStatus.applicationProcessing]: {
            title: '–ó–∞–ø–∏—Ç –ø–æ–ª–µ—Ç—ñ–≤ –≤ –æ–±—Ä–æ–±–∫—É',
            text: '–ë—ñ–ª—å—à—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –æ–ø—Ä–∞—Ü—å–æ–≤—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏—Ç—è–≥—É —Ç—Ä–∏–≤–∞—î –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω. –ü—Ä–æ—Ç–µ —á–∞—Å–æ–º –¥–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –¢–æ–¥—ñ –≤–∏—Ç—è–≥ –≥–æ—Ç—É—é—Ç—å –≤—Ä—É—á–Ω—É. –ó–∞–∑–≤–∏—á–∞–π —Ü–µ —Ç—Ä–∏–≤–∞—î –¥–æ 10 –¥–Ω—ñ–≤, —ñ–Ω–∫–æ–ª–∏ ‚Äî –¥–æ 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
            icon: '‚è≥',
            parameters: [],
        },
        [CriminalRecordCertificateStatus.done]: {
            title: '–í–∏—Ç—è–≥ –≥–æ—Ç–æ–≤–∏–π',
            text: '–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –π–æ–≥–æ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.',
            icon: '‚úÖ',
            parameters: [],
        },
    }

    readonly applicationStartMessage: string =
        '–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏: \n\n‚Ä¢ —Ç–∏–ø —Ç–∞ –º–µ—Ç—É –∑–∞–ø–∏—Ç—É; \n‚Ä¢ –º—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è; \n‚Ä¢ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. \n\n–Ø–∫—â–æ –∑ –¥–∞–Ω–∏–º–∏ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤–∏—Ç—è–≥ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤. –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ‚Äî –ø—Ä–æ—Ç—è–≥–æ–º 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤.'

    readonly missingTaxpayerCardAttentionMessage: AttentionMessage = {
        icon: 'üòû',
        text: '–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å. –í–∞—à –†–ù–û–ö–ü–ü –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–¥–∞—Ç–∫–æ–≤–æ—é.',
        parameters: [],
    }

    readonly confirmingTaxpayerCardAttentionMessage: AttentionMessage = {
        icon: 'üòû',
        text: '–í–∞—à –†–ù–û–ö–ü–ü —â–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –ø–æ–¥–∞—Ç–∫–æ–≤–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ.',
        parameters: [],
    }

    readonly unsuitableAgeAttentionMessage: AttentionMessage = {
        icon: 'üòû',
        text: '–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å. –í–∞–º —â–µ –Ω–µ –≤–∏–ø–æ–≤–Ω–∏–ª–æ—Å—è 14 —Ä–æ–∫—ñ–≤.',
        parameters: [],
    }

    readonly serviceIsNotActiveAttentionMessage: AttentionMessage = {
        icon: 'üòû',
        text: '–ù–∞ –∂–∞–ª—å, –ø–æ—Å–ª—É–≥–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        parameters: [],
    }

    readonly userGenderToFullGenderName: Record<Gender, string> = {
        [Gender.male]: '–ß–æ–ª–æ–≤—ñ–∫',
        [Gender.female]: '–ñ—ñ–Ω–∫–∞',
    }

    readonly userGenderToProviderCertOrderGender: Record<Gender, CriminalRecordCertOrderGender> = {
        [Gender.male]: CriminalRecordCertOrderGender.Male,
        [Gender.female]: CriminalRecordCertOrderGender.Female,
    }

    readonly certificateStatusToNamePlural: Partial<Record<CriminalRecordCertificateStatus, string>> = {
        [CriminalRecordCertificateStatus.applicationProcessing]: '–ó–∞–º–æ–≤–ª–µ–Ω—ñ',
        [CriminalRecordCertificateStatus.done]: '–ì–æ—Ç–æ–≤—ñ',
    }

    readonly typeCodeToName: Record<CriminalRecordCertificateType, string> = {
        [CriminalRecordCertificateType.short]: '–¢–∏–ø: –∫–æ—Ä–æ—Ç–∫–∏–π',
        [CriminalRecordCertificateType.full]: '–¢–∏–ø: –ø–æ–≤–Ω–∏–π',
    }

    readonly typeCodeToProviderCertOrderType: Record<CriminalRecordCertificateType, CriminalRecordCertOrderType> = {
        [CriminalRecordCertificateType.short]: CriminalRecordCertOrderType.Short,
        [CriminalRecordCertificateType.full]: CriminalRecordCertOrderType.Full,
    }

    toApplicationDetails(certificate: CriminalRecordCertificateModel): CriminalRecordCertificateApplicationDetails {
        const { status } = certificate

        const title = '–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏—Ç—è–≥ –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å'
        const statusMessage = this.statusMessageByStatus[status]

        if (status !== CriminalRecordCertificateStatus.done) {
            return {
                title,
                statusMessage,
                status,
                loadActions: [],
            }
        }

        const loadActions = [
            {
                type: CriminalRecordCertificateApplicationLoadActionType.downloadArchive,
                icon: this.assetsService.getIcon(Icon.Download),
                name: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤',
            },
            {
                type: CriminalRecordCertificateApplicationLoadActionType.viewPdf,
                icon: this.assetsService.getIcon(Icon.View),
                name: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏—Ç—è–≥',
            },
        ]

        return {
            title,
            statusMessage,
            status,
            loadActions,
        }
    }

    toStatusFilterInfo(status: CriminalRecordCertificateStatus): CriminalRecordCertificateStatusFilterInfo {
        return {
            code: status,
            name: this.certificateStatusToNamePlural[status]!,
        }
    }

    toResponseItem(certificate: CriminalRecordCertificateModel): CriminalRecordCertificateItem {
        const { applicationId, status, reason, createdAt, type } = certificate

        return {
            applicationId,
            status,
            reason: reason!.name,
            creationDate: `–≤—ñ–¥ ${moment(createdAt).format(this.config.app.dateFormat)}`,
            type: this.typeCodeToName[type!],
        }
    }

    toApplicationConfirmationResponse(
        requestData: CriminalRecordCertificateApplicationRequestData,
        reasonLabel: string,
        certificateTypeDescription?: string,
    ): CriminalRecordCertificateApplicationConfirmationApplication {
        const {
            lastName,
            firstName,
            middleName,
            nationalities,
            previousLastName,
            previousFirstName,
            previousMiddleName,
            birthDate,
            gender,
            birthCountry,
            birthCity,
            registrationCountry,
            registrationRegion,
            registrationDistrict,
            registrationCity,
            phoneNumber,
            email,
        } = requestData

        const fullName = utils.getFullName(lastName, firstName, middleName)

        return {
            title: '–ó–∞–ø–∏—Ç –ø—Ä–æ –Ω–∞–¥–∞–Ω–Ω—è –≤–∏—Ç—è–≥—É –ø—Ä–æ –Ω–µ—Å—É–¥–∏–º—ñ—Å—Ç—å',
            attentionMessage: {
                icon: '‚òùÔ∏è',
                text: '–£–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –∑–∞–º–æ–≤–∏—Ç–∏ –≤–∏—Ç—è–≥.',
                parameters: [],
            },
            applicant: {
                title: '–î–∞–Ω—ñ –ø—Ä–æ –∑–∞—è–≤–Ω–∏–∫–∞',
                fullName: {
                    label: '–ü–Ü–ë:',
                    value: fullName,
                },
                previousLastName: previousLastName
                    ? {
                          label: '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø—Ä—ñ–∑–≤–∏—â–∞:',
                          value: previousLastName.replaceAll(/\s*,\s*/g, '\n'),
                      }
                    : undefined,
                previousFirstName: previousFirstName
                    ? {
                          label: '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–º–µ–Ω–∞:',
                          value: previousFirstName.replaceAll(/\s*,\s*/g, '\n'),
                      }
                    : undefined,
                previousMiddleName: previousMiddleName
                    ? {
                          label: '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ:',
                          value: previousMiddleName.replaceAll(/\s*,\s*/g, '\n'),
                      }
                    : undefined,
                gender: {
                    label: '–°—Ç–∞—Ç—å:',
                    value: this.userGenderToFullGenderName[gender],
                },
                nationality: {
                    label: '–ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ:',
                    value: nationalities.join('\n'),
                },
                birthDate: {
                    label: '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:',
                    value: birthDate,
                },
                birthPlace: {
                    label: '–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:',
                    value: [birthCountry, birthCity].filter((item) => !!item).join(', '),
                },
                registrationAddress: {
                    label: '–ú—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è:',
                    value: [registrationCountry, registrationRegion, registrationDistrict, registrationCity]
                        .filter((item) => !!item)
                        .join(', '),
                },
            },
            contacts: {
                title: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ',
                phoneNumber: {
                    label: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:',
                    value: phoneNumber,
                },
                email: email
                    ? {
                          label: 'Email:',
                          value: email,
                      }
                    : undefined,
            },
            certificateType: {
                title: '–¢–∏–ø –≤–∏—Ç—è–≥—É',
                type: certificateTypeDescription || '',
            },
            reason: {
                title: '–ú–µ—Ç–∞ –∑–∞–ø–∏—Ç—É',
                reason: reasonLabel,
            },
            checkboxName: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö —É –∑–∞—è–≤—ñ –¥–∞–Ω–∏—Ö',
        }
    }

    toProviderRequest(requestData: CriminalRecordCertificateApplicationRequestData): CriminalRecordCertOrderRequest {
        const {
            firstName,
            lastName,
            middleName,
            previousFirstName,
            previousLastName,
            previousMiddleName,
            gender: userGender,
            birthDate: userBirthDate,
            birthCountry,
            birthRegion,
            birthDistrict,
            birthCity,
            registrationCountry,
            registrationRegion,
            registrationDistrict,
            registrationCity,
            nationalities,
            phoneNumber: phone,
            certificateType,
            reasonId: purpose,
            itn: clientId,
        } = requestData

        const firstNameChanged = !!previousFirstName
        const lastNameChanged = !!previousLastName
        const middleNameChanged = !!previousMiddleName
        const firstNameBefore = firstNameChanged ? previousFirstName.replaceAll(/\s*,\s*/g, ', ') : undefined
        const lastNameBefore = lastNameChanged ? previousLastName.replaceAll(/\s*,\s*/g, ', ') : undefined
        const middleNameBefore = middleNameChanged ? previousMiddleName.replaceAll(/\s*,\s*/g, ', ') : undefined

        const gender = this.userGenderToProviderCertOrderGender[userGender]
        const birthDate = moment(userBirthDate, this.config.app.dateFormat).format(this.providerDateFormat)
        const nationality = nationalities.join(',')
        const type = this.typeCodeToProviderCertOrderType[certificateType!]

        return {
            firstName,
            lastName,
            middleName,
            firstNameChanged,
            lastNameChanged,
            middleNameChanged,
            firstNameBefore,
            lastNameBefore,
            middleNameBefore,
            gender,
            birthDate,
            birthCountry: birthCountry!,
            birthRegion,
            birthDistrict,
            birthCity: birthCity!,
            registrationCountry: registrationCountry!,
            registrationRegion,
            registrationDistrict,
            registrationCity: registrationCity!,
            nationality,
            phone,
            type,
            purpose: purpose!,
            clientId,
        }
    }
}
